# -*- coding: utf-8 -*-
"""submission ts.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16Zxzl5cd332KLY7AhA-SOFu27_ew5RJM
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
from math import sqrt

from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import MinMaxScaler

import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.layers import LSTM
from tensorflow.keras.layers import Dropout
from tensorflow.keras.callbacks import EarlyStopping

df = pd.read_csv('/content/btc-usdt.csv')
df.head()

df.info()

df.shape

df.isnull().sum()

group = df.groupby('Close Time')
close = group['Close'].mean()

pred_range = 120
data_train= persen[:len(persen)-pred_range].values.reshape(-1,1)
data_test= persen[len(persen)-pred_range:].values.reshape(-1,1)

scaler_train = MinMaxScaler(feature_range=(0, 1))
scaled_train = scaler_train.fit_transform(data_train)

scaler_test = MinMaxScaler(feature_range=(0, 1))
scaled_test = scaler_test.fit_transform(data_test)

def preprocess_dataset(dataset, look_back=1):
    dataX, dataY = [], []
    for i in range(len(dataset) - look_back):
        a = dataset[i:(i + look_back), 0]
        dataX.append(a)
        dataY.append(dataset[i + look_back, 0])
    npx = np.array(dataX)
    npy = np.array(dataY)
    rshapeX = np.reshape(npx, (npx.shape[0], 1, npx.shape[1]))
    return rshapeX, npy

train_x, train_y = preprocess_dataset(scaled_train)
test_x, test_y = preprocess_dataset(scaled_test)

model = Sequential()
model.add(LSTM(10,activation="sigmoid",return_sequences = True,input_shape = (None, 1)))
model.add(Dense(units = 1))
model.summary()

model.compile(optimizer = 'adam', loss = 'mean_squared_error', metrics=["mae"])
callback = EarlyStopping(monitor='loss', patience=5) #callback untuk stop berdasarkan loss
history = model.fit(train_x, train_y, batch_size = 32, epochs = 100, verbose=1, shuffle=False, validation_split=0.2, callbacks=[callback])

plt.figure(figsize=(18,5))

plt.subplot(1,2,1)
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Model Mae')
plt.xlabel('Epochs')
plt.ylabel('Mae')
plt.legend(['train', 'test'], loc='upper left')

plt.subplot(1,2,2)
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend(['train', 'test'], loc='upper left')

plt.show()